<?phpnamespace App\Controller;use App\Entity\Staff;use App\Form\StaffType;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Response;use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;use Symfony\Component\Routing\Annotation\Route;class StaffController extends AbstractController{    /**     * @Route("/staff", name="staff")     */    public function index(): Response    {        return $this->render('Staff/profil.html.twig', [            'controller_name' => 'StaffController',        ]);    }    /**     * @Route ("/create-staff", name="create_staff")     * @param Request $request     * @param UserPasswordHasherInterface $passwordHasher     * @return Response     */       public function register(Request $request, UserPasswordHasherInterface $passwordHasher)    {        // COnstruction du formulaire        $staff = new Staff();        $form = $this->createForm(StaffType::class, $staff);        // Va permettre d'hydrater l'objet lors de la soumission        $form->handleRequest($request);        // Is valid fait réf aux différentes contraintes de validation        if ($form->isSubmitted() && $form->isValid()) {            $password = $passwordHasher->hashPassword($staff, $staff->getPassword());            $staff->setPassword($password);            $em = $this->getDoctrine()->getManager();            // Récupère l'objet doctrine et l'entity manager pour mettre à jour la bdd            $em->persist($staff);            $em->flush();        }        return $this->render("Staff/create.html.twig", [            "form" => $form->createView()]);    }}